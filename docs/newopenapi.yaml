openapi: 3.0.0
info:
  title: CertM3 API
  description: |
    API for managing certificates, users, groups, and certificate requests.
    This API provides endpoints for certificate lifecycle management, user management,
    group management, and certificate request processing.
  version: 1.0.0
  contact:
    name: ogt11.com/llc
servers:
  - url: https://urp.ogt11.com/api
    description: Production server

components:
  schemas:
    User:
      type: object
      required:
        - username
        - email
        - displayName
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user (auto-generated)
        username:
          type: string
          description: Unique username
        email:
          type: string
          format: email
          description: User's email address (unique)
        displayName:
          type: string
          description: User's display name (defaults to 'Unknown')
        status:
          type: string
          enum: [active, inactive]
          description: User's current status
        createdAt:
          type: string
          format: date-time
          description: When the user was created
        createdBy:
          type: string
          description: ID of the user who created this user
        updatedAt:
          type: string
          format: date-time
          description: When the user was last updated
        updatedBy:
          type: string
          description: ID of the user who last updated this user

    Certificate:
      type: object
      required:
        - serialNumber
        - codeVersion
        - username
        - userId
        - commonName
        - email
        - fingerprint
        - notBefore
        - notAfter
        - status
        - createdAt
        - updatedAt
      properties:
        serialNumber:
          type: string
          format: uuid
          description: Unique serial number for the certificate (auto-generated)
        codeVersion:
          type: string
          maxLength: 50
          description: Version of the code that generated the certificate
        username:
          type: string
          description: Username associated with the certificate
        userId:
          type: string
          format: uuid
          description: ID of the user who owns the certificate
        commonName:
          type: string
          description: Common name in the certificate
        email:
          type: string
          format: email
          description: Email address in the certificate
        fingerprint:
          type: string
          description: Certificate fingerprint (unique)
        notBefore:
          type: string
          format: date-time
          description: Certificate validity start date
        notAfter:
          type: string
          format: date-time
          description: Certificate validity end date
        status:
          type: string
          enum: [active, revoked]
          description: Certificate status
        revokedAt:
          type: string
          format: date-time
          description: When the certificate was revoked
        revokedBy:
          type: string
          description: ID of the user who revoked the certificate
        revocationReason:
          type: string
          description: Reason for revocation
        createdAt:
          type: string
          format: date-time
          description: When the certificate was created
        createdBy:
          type: string
          description: ID of the user who created the certificate
        updatedAt:
          type: string
          format: date-time
          description: When the certificate was last updated
        updatedBy:
          type: string
          description: ID of the user who last updated the certificate

    Group:
      type: object
      required:
        - name
        - displayName
        - status
        - createdAt
        - updatedAt
      properties:
        name:
          type: string
          description: Unique name of the group
        displayName:
          type: string
          description: Display name of the group
        description:
          type: string
          description: Group description
        status:
          type: string
          enum: [active, inactive]
          description: Group status
        createdAt:
          type: string
          format: date-time
          description: When the group was created
        createdBy:
          type: string
          description: ID of the user who created the group
        updatedAt:
          type: string
          format: date-time
          description: When the group was last updated
        updatedBy:
          type: string
          description: ID of the user who last updated the group

    Request:
      type: object
      required:
        - username
        - displayName
        - email
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the request (auto-generated)
        username:
          type: string
          description: Requested username
        displayName:
          type: string
          description: Requested display name
        email:
          type: string
          format: email
          description: Requested email address
        status:
          type: string
          enum: [pending, approved, rejected]
          description: Request status
        challenge:
          type: string
          description: Challenge token for validation
        createdAt:
          type: string
          format: date-time
          description: When the request was created
        createdBy:
          type: string
          description: ID of the user who created the request
        updatedAt:
          type: string
          format: date-time
          description: When the request was last updated
        updatedBy:
          type: string
          description: ID of the user who last updated the request

    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - statusCode
            - name
            - message
          properties:
            statusCode:
              type: integer
              description: HTTP status code
            name:
              type: string
              description: Error name
            message:
              type: string
              description: Error message

    PingResponse:
      type: object
      required:
        - greeting
        - date
        - url
        - headers
      properties:
        greeting:
          type: string
          description: Greeting message
        date:
          type: string
          format: date-time
          description: Current server time
        url:
          type: string
          description: Request URL
        headers:
          type: object
          description: Request headers

    UserGroup:
      type: object
      description: |
        Internal join table representing the many-to-many relationship between users and groups.
        This schema is used internally by the API but is not directly exposed in responses.
        Instead, the API provides simplified endpoints:
        - GET /users/{userId}/groups returns an array of group names
        - GET /groups/{name}/members returns an array of User objects
        - POST /groups/{name}/members accepts an array of user IDs
      required:
        - userId
        - groupName
        - createdAt
        - updatedAt
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user in the group
        groupName:
          type: string
          maxLength: 255
          description: Name of the group
        createdAt:
          type: string
          format: date-time
          description: When the user was added to the group
        createdBy:
          type: string
          maxLength: 255
          description: ID of the user who added this user to the group
        updatedAt:
          type: string
          format: date-time
          description: When the group membership was last updated
        updatedBy:
          type: string
          maxLength: 255
          description: ID of the user who last updated this group membership

paths:
  /api/ping:
    get:
      x-controller-name: PingController
      x-operation-name: ping
      tags:
        - PingController
      summary: Check API health
      description: Returns a ping response with server information
      responses:
        '200':
          description: Ping Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
      operationId: PingController.ping

  /certificates/{id}/revoke:
    post:
      x-controller-name: CertificateController
      x-operation-name: revoke
      tags:
        - CertificateController
      summary: Revoke a certificate
      description: Revokes a certificate by its ID
      responses:
        '204':
          description: Certificate revocation success
        '404':
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Certificate ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - revokedBy
                - revocationReason
              properties:
                revokedBy:
                  type: string
                  description: ID of the user revoking the certificate
                revocationReason:
                  type: string
                  description: Reason for revocation
      operationId: CertificateController.revoke

  /certificates/{id}:
    patch:
      x-controller-name: CertificateController
      x-operation-name: updateById
      tags:
        - CertificateController
      summary: Update a certificate
      description: Updates a certificate's details by its ID
      responses:
        '204':
          description: Certificate PATCH success
        '404':
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Certificate ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                codeVersion:
                  type: string
                  description: Version of the code that generated the certificate
                commonName:
                  type: string
                  description: Common name in the certificate
                email:
                  type: string
                  format: email
                  description: Email address in the certificate
                notBefore:
                  type: string
                  format: date-time
                  description: Certificate validity start date
                notAfter:
                  type: string
                  format: date-time
                  description: Certificate validity end date
      operationId: CertificateController.updateById

    get:
      x-controller-name: CertificateController
      x-operation-name: findById
      tags:
        - CertificateController
      summary: Get a certificate
      description: Retrieves a certificate by its ID
      responses:
        '200':
          description: Certificate model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '404':
          description: Certificate not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Certificate ID
      operationId: CertificateController.findById

  /certificates:
    post:
      x-controller-name: CertificateController
      x-operation-name: create
      tags:
        - CertificateController
      summary: Create a certificate
      description: Creates a new certificate
      responses:
        '200':
          description: Certificate model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Certificate'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - serialNumber
                - codeVersion
                - username
                - commonName
                - email
                - fingerprint
                - notBefore
                - notAfter
                - userId
              properties:
                serialNumber:
                  type: string
                  format: uuid
                  description: Unique serial number for the certificate
                codeVersion:
                  type: string
                  maxLength: 50
                  description: Version of the code that generated the certificate
                username:
                  type: string
                  description: Username associated with the certificate
                commonName:
                  type: string
                  description: Common name in the certificate
                email:
                  type: string
                  format: email
                  description: Email address in the certificate
                fingerprint:
                  type: string
                  description: Certificate fingerprint (unique)
                notBefore:
                  type: string
                  format: date-time
                  description: Certificate validity start date
                notAfter:
                  type: string
                  format: date-time
                  description: Certificate validity end date
                userId:
                  type: string
                  format: uuid
                  description: ID of the user who owns the certificate
      operationId: CertificateController.create

    get:
      x-controller-name: CertificateController
      x-operation-name: find
      tags:
        - CertificateController
      summary: List certificates
      description: Retrieves a list of certificates with optional filtering
      responses:
        '200':
          description: Array of Certificate model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Certificate'
      parameters:
        - name: username
          in: query
          schema:
            type: string
          description: Filter by username
        - name: status
          in: query
          schema:
            type: string
            enum: [active, revoked]
          description: Filter by status
      operationId: CertificateController.find

  /groups/{name}/deactivate:
    post:
      x-controller-name: GroupController
      x-operation-name: deactivate
      tags:
        - GroupController
      summary: Deactivate a group
      description: Deactivates a group by its name
      responses:
        '204':
          description: Group deactivation success
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Group name
      operationId: GroupController.deactivate

  /groups/{name}/members:
    post:
      x-controller-name: GroupController
      x-operation-name: addMembers
      tags:
        - GroupController
      summary: Add members to a group
      description: Adds one or more users to a group
      responses:
        '204':
          description: Add members to group success
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Group name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - userIds
              properties:
                userIds:
                  type: array
                  items:
                    type: string
                    format: uuid
                  description: Array of user IDs to add to the group
      operationId: GroupController.addMembers

    get:
      x-controller-name: GroupController
      x-operation-name: getMembers
      tags:
        - GroupController
      summary: Get group members
      description: Retrieves all members of a group
      responses:
        '200':
          description: Array of User model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Group name
      operationId: GroupController.getMembers

  /groups/{name}:
    patch:
      x-controller-name: GroupController
      x-operation-name: updateById
      tags:
        - GroupController
      summary: Update a group
      description: Updates a group's details by its name
      responses:
        '204':
          description: Group PATCH success
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Group name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: Display name of the group
                description:
                  type: string
                  description: Group description
      operationId: GroupController.updateById

    get:
      x-controller-name: GroupController
      x-operation-name: findById
      tags:
        - GroupController
      summary: Get a group
      description: Retrieves a group by its name
      responses:
        '200':
          description: Group model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '404':
          description: Group not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
          description: Group name
      operationId: GroupController.findById

  /groups:
    post:
      x-controller-name: GroupController
      x-operation-name: create
      tags:
        - GroupController
      summary: Create a group
      description: Creates a new group
      responses:
        '200':
          description: Group model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - displayName
              properties:
                name:
                  type: string
                  description: Unique name of the group
                displayName:
                  type: string
                  description: Display name of the group
                description:
                  type: string
                  description: Group description
      operationId: GroupController.create

    get:
      x-controller-name: GroupController
      x-operation-name: find
      tags:
        - GroupController
      summary: List groups
      description: Retrieves a list of groups with optional filtering
      responses:
        '200':
          description: Array of Group model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
          description: Filter by status
      operationId: GroupController.find

  /requests/{id}:
    patch:
      x-controller-name: RequestController
      x-operation-name: updateById
      tags:
        - RequestController
      summary: Update a request
      description: Updates a certificate request by its ID
      responses:
        '204':
          description: Request PATCH success
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Request ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, approved, rejected]
                  description: New request status
      operationId: RequestController.updateById

    get:
      x-controller-name: RequestController
      x-operation-name: findById
      tags:
        - RequestController
      summary: Get a request
      description: Retrieves a certificate request by its ID
      responses:
        '200':
          description: Request model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '404':
          description: Request not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Request ID
      operationId: RequestController.findById

  /requests:
    post:
      x-controller-name: RequestController
      x-operation-name: create
      tags:
        - RequestController
      summary: Create a request
      description: Creates a new certificate request
      responses:
        '200':
          description: Request model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - displayName
                - email
              properties:
                username:
                  type: string
                  description: Requested username
                displayName:
                  type: string
                  description: Requested display name
                email:
                  type: string
                  format: email
                  description: Requested email address
      operationId: RequestController.create

    get:
      x-controller-name: RequestController
      x-operation-name: find
      tags:
        - RequestController
      summary: List requests
      description: Retrieves a list of certificate requests with optional filtering
      responses:
        '200':
          description: Array of Request model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, approved, rejected]
          description: Filter by status
      operationId: RequestController.find

  /users/{id}:
    patch:
      x-controller-name: UserController
      x-operation-name: updateById
      tags:
        - UserController
      summary: Update a user
      description: Updates a user's details by their ID
      responses:
        '204':
          description: User PATCH success
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                  description: User's display name
                email:
                  type: string
                  format: email
                  description: User's email address
                status:
                  type: string
                  enum: [active, inactive]
                  description: User's status
      operationId: UserController.updateById

    get:
      x-controller-name: UserController
      x-operation-name: findById
      tags:
        - UserController
      summary: Get a user
      description: Retrieves a user by their ID
      responses:
        '200':
          description: User model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      operationId: UserController.findById

  /users:
    post:
      x-controller-name: UserController
      x-operation-name: create
      tags:
        - UserController
      summary: Create a user
      description: Creates a new user
      responses:
        '200':
          description: User model instance
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - displayName
              properties:
                username:
                  type: string
                  description: Unique username
                email:
                  type: string
                  format: email
                  description: User's email address
                displayName:
                  type: string
                  description: User's display name
      operationId: UserController.create

    get:
      x-controller-name: UserController
      x-operation-name: find
      tags:
        - UserController
      summary: List users
      description: Retrieves a list of users with optional filtering
      responses:
        '200':
          description: Array of User model instances
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
      parameters:
        - name: status
          in: query
          schema:
            type: string
            enum: [active, inactive]
          description: Filter by status
      operationId: UserController.find 