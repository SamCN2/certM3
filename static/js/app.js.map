{"version":3,"file":"app.js","mappings":";;;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA,iBAAiB;AACjB,uCAAuC,UAAU;AACjD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA,iBAAiB;AACjB,uCAAuC,OAAO;AAC9C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa,yBAAyB,UAAU;AAC5F;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;;;;;;;;;;;AC1GL;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,gBAAgB;AAChB;AACA;AACA;AACA;AACA,kCAAkC,SAAS;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;;;;;;;;;;;ACzBH;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB;AACvB,oBAAoB,mBAAO,CAAC,gDAAa;AACzC,sBAAsB,mBAAO,CAAC,iEAAyB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA,2DAA2D;AAC3D,6DAA6D;AAC7D,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;;;;;;;;;;;ACzHV;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,mBAAmB;AACnB,oBAAoB,mBAAO,CAAC,gDAAa;AACzC,sBAAsB,mBAAO,CAAC,iEAAyB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,KAAK;AACjD;AACA;AACA,oFAAoF;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA,2DAA2D;AAC3D,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,KAAK;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;;;;;;;;;;;ACnKN;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,oBAAoB;AACpB,oBAAoB,mBAAO,CAAC,gDAAa;AACzC,sBAAsB,mBAAO,CAAC,iEAAyB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA,2DAA2D;AAC3D,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;;;;;;;UCpFpB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;ACtBa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D,uBAAuB,mBAAO,CAAC,4DAAsB;AACrD,wBAAwB,mBAAO,CAAC,8DAAuB;AACvD,2BAA2B,mBAAO,CAAC,oEAA0B;AAC7D,sBAAsB,mBAAO,CAAC,gEAAwB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack://certm3-web/./src/js/services/api.service.ts","webpack://certm3-web/./src/js/views/base.view.ts","webpack://certm3-web/./src/js/views/certificate.view.ts","webpack://certm3-web/./src/js/views/request.view.ts","webpack://certm3-web/./src/js/views/validate.view.ts","webpack://certm3-web/webpack/bootstrap","webpack://certm3-web/./src/js/app.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ApiService = void 0;\nclass ApiService {\n    constructor() {\n        this.baseUrl = 'http://urp.ogt11.com/api';\n        // Constructor logic if needed\n    }\n    static getInstance() {\n        if (!ApiService.instance) {\n            ApiService.instance = new ApiService();\n        }\n        return ApiService.instance;\n    }\n    async createRequest(request) {\n        try {\n            const response = await fetch(`${this.baseUrl}/requests`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify(request),\n            });\n            const data = await response.json();\n            return {\n                success: response.ok,\n                data: response.ok ? data : undefined,\n                error: response.ok ? undefined : data.message,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred',\n            };\n        }\n    }\n    async validateUsername(username) {\n        try {\n            const response = await fetch(`${this.baseUrl}/validate/username`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ username }),\n            });\n            const data = await response.json();\n            return {\n                success: response.ok,\n                data: response.ok ? data : undefined,\n                error: response.ok ? undefined : data.message,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred',\n            };\n        }\n    }\n    async validateEmail(email) {\n        try {\n            const response = await fetch(`${this.baseUrl}/validate/email`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ email }),\n            });\n            const data = await response.json();\n            return {\n                success: response.ok,\n                data: response.ok ? data : undefined,\n                error: response.ok ? undefined : data.message,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred',\n            };\n        }\n    }\n    async generateCertificate(requestId) {\n        try {\n            const response = await fetch(`${this.baseUrl}/certificates/generate/${requestId}`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n            });\n            const data = await response.json();\n            return {\n                success: response.ok,\n                data: response.ok ? data : undefined,\n                error: response.ok ? undefined : data.message,\n            };\n        }\n        catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred',\n            };\n        }\n    }\n}\nexports.ApiService = ApiService;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BaseView = void 0;\nclass BaseView {\n    constructor(viewName) {\n        this.template = '';\n        this.element = document.createElement('div');\n        this.element.id = `view-${viewName}`;\n        this.element.className = 'view';\n        document.getElementById('app-content')?.appendChild(this.element);\n    }\n    show() {\n        this.element.style.display = 'block';\n        this.onShow();\n    }\n    hide() {\n        this.element.style.display = 'none';\n        this.onHide();\n    }\n    onShow() { }\n    onHide() { }\n    setContent(html) {\n        this.element.innerHTML = html;\n    }\n}\nexports.BaseView = BaseView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CertificateView = void 0;\nconst base_view_1 = require(\"./base.view\");\nconst api_service_1 = require(\"../services/api.service\");\nclass CertificateView extends base_view_1.BaseView {\n    constructor() {\n        super('certificate');\n        this.apiService = api_service_1.ApiService.getInstance();\n        this.render();\n    }\n    render() {\n        const html = `\n      <div class=\"ui segment\">\n        <h2 class=\"ui header\">Generate Certificate</h2>\n        <form class=\"ui form\" id=\"generate-certificate-form\">\n          <div class=\"field\">\n            <label>Request ID</label>\n            <input type=\"text\" name=\"requestId\" required>\n          </div>\n          <button class=\"ui primary button\" type=\"submit\">\n            <span class=\"button-text\">Generate Certificate</span>\n            <div class=\"ui active inline loader\" style=\"display: none;\"></div>\n          </button>\n        </form>\n        <div class=\"ui error message\" style=\"display: none;\"></div>\n        <div class=\"ui success message\" style=\"display: none;\"></div>\n        <div class=\"ui segment certificate-result\" style=\"display: none;\">\n          <h3 class=\"ui header\">Certificate Details</h3>\n          <div class=\"ui list\">\n            <div class=\"item\">\n              <div class=\"header\">Certificate ID</div>\n              <div class=\"description certificate-id\"></div>\n            </div>\n            <div class=\"item\">\n              <div class=\"header\">Valid Until</div>\n              <div class=\"description valid-until\"></div>\n            </div>\n          </div>\n          <div class=\"ui divider\"></div>\n          <button class=\"ui secondary button download-certificate\">\n            <i class=\"download icon\"></i> Download Certificate\n          </button>\n        </div>\n      </div>\n    `;\n        this.setContent(html);\n        this.setupEventListeners();\n    }\n    setupEventListeners() {\n        const form = this.element.querySelector('#generate-certificate-form');\n        form.addEventListener('submit', this.handleSubmit.bind(this));\n        const downloadButton = this.element.querySelector('.download-certificate');\n        downloadButton.addEventListener('click', this.handleDownload.bind(this));\n    }\n    async handleSubmit(event) {\n        event.preventDefault();\n        const form = event.target;\n        const formData = new FormData(form);\n        const requestId = formData.get('requestId');\n        this.setLoading(true);\n        this.hideMessages();\n        this.hideCertificateResult();\n        try {\n            const response = await this.apiService.generateCertificate(requestId);\n            if (response.success) {\n                this.showSuccess('Certificate generated successfully!');\n                this.showCertificateResult(response.data);\n                form.reset();\n            }\n            else {\n                this.showError(response.error || 'Failed to generate certificate');\n            }\n        }\n        catch (error) {\n            this.showError('An unexpected error occurred');\n            console.error('Error generating certificate:', error);\n        }\n        finally {\n            this.setLoading(false);\n        }\n    }\n    async handleDownload() {\n        // TODO: Implement certificate download\n        console.log('Download certificate');\n    }\n    showCertificateResult(data) {\n        const resultDiv = this.element.querySelector('.certificate-result');\n        const certificateId = resultDiv.querySelector('.certificate-id');\n        const validUntil = resultDiv.querySelector('.valid-until');\n        certificateId.textContent = data.certificateId;\n        validUntil.textContent = new Date(data.validUntil).toLocaleString();\n        resultDiv.style.display = 'block';\n    }\n    hideCertificateResult() {\n        const resultDiv = this.element.querySelector('.certificate-result');\n        resultDiv.style.display = 'none';\n    }\n    setLoading(isLoading) {\n        const button = this.element.querySelector('button[type=\"submit\"]');\n        const loader = button.querySelector('.loader');\n        const buttonText = button.querySelector('.button-text');\n        button.disabled = isLoading;\n        loader.style.display = isLoading ? 'inline-block' : 'none';\n        buttonText.style.display = isLoading ? 'none' : 'inline-block';\n    }\n    showError(message) {\n        const errorMessage = this.element.querySelector('.error.message');\n        errorMessage.textContent = message;\n        errorMessage.style.display = 'block';\n    }\n    showSuccess(message) {\n        const successMessage = this.element.querySelector('.success.message');\n        successMessage.textContent = message;\n        successMessage.style.display = 'block';\n    }\n    hideMessages() {\n        const messages = this.element.querySelectorAll('.message');\n        messages.forEach(msg => msg.style.display = 'none');\n    }\n}\nexports.CertificateView = CertificateView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequestView = void 0;\nconst base_view_1 = require(\"./base.view\");\nconst api_service_1 = require(\"../services/api.service\");\nclass RequestView extends base_view_1.BaseView {\n    constructor() {\n        super('request');\n        this.usernameTimeout = null;\n        this.apiService = api_service_1.ApiService.getInstance();\n        this.render();\n    }\n    render() {\n        const html = `\n      <div class=\"ui segment\">\n        <h2 class=\"ui header\">Request User Account</h2>\n        <div class=\"ui info message\">\n          <div class=\"header\">Before You Begin</div>\n          <p>You'll need to provide:</p>\n          <ul class=\"list\">\n            <li>A unique username</li>\n            <li>A valid email address</li>\n            <li>Your display name</li>\n          </ul>\n          <p>After submitting, you'll receive an email with a validation link.</p>\n        </div>\n        <form class=\"ui form\" id=\"user-request-form\">\n          <div class=\"field\">\n            <label>Username</label>\n            <div class=\"ui input\">\n              <input type=\"text\" name=\"username\" required \n                     pattern=\"[a-zA-Z0-9_-]{3,32}\" \n                     title=\"3-32 characters, letters, numbers, underscore, or hyphen\">\n            </div>\n            <div class=\"ui pointing label username-validation\" style=\"display: none;\"></div>\n          </div>\n          <div class=\"field\">\n            <label>Email Address</label>\n            <div class=\"ui input\">\n              <input type=\"email\" name=\"email\" required>\n            </div>\n          </div>\n          <div class=\"field\">\n            <label>Display Name</label>\n            <div class=\"ui input\">\n              <input type=\"text\" name=\"displayName\" required \n                     minlength=\"2\" maxlength=\"64\"\n                     title=\"2-64 characters\">\n            </div>\n          </div>\n          <button class=\"ui primary button\" type=\"submit\">\n            <span class=\"button-text\">Request Account</span>\n            <div class=\"ui active inline loader\" style=\"display: none;\"></div>\n          </button>\n        </form>\n        <div class=\"ui error message\" style=\"display: none;\"></div>\n        <div class=\"ui success message\" style=\"display: none;\"></div>\n      </div>\n    `;\n        this.setContent(html);\n        this.setupEventListeners();\n    }\n    setupEventListeners() {\n        const form = this.element.querySelector('#user-request-form');\n        const usernameInput = form.querySelector('input[name=\"username\"]');\n        form.addEventListener('submit', this.handleSubmit.bind(this));\n        usernameInput.addEventListener('input', this.handleUsernameInput.bind(this));\n    }\n    async handleUsernameInput(event) {\n        const input = event.target;\n        const validationLabel = this.element.querySelector('.username-validation');\n        // Clear any existing timeout\n        if (this.usernameTimeout) {\n            window.clearTimeout(this.usernameTimeout);\n        }\n        // Set a new timeout for validation\n        this.usernameTimeout = window.setTimeout(async () => {\n            const username = input.value.trim();\n            if (!username) {\n                validationLabel.style.display = 'none';\n                return;\n            }\n            // Validate format first\n            if (!/^[a-zA-Z0-9_-]{3,32}$/.test(username)) {\n                validationLabel.className = 'ui pointing red label username-validation';\n                validationLabel.textContent = 'Username must be 3-32 characters, letters, numbers, underscore, or hyphen';\n                validationLabel.style.display = 'block';\n                return;\n            }\n            try {\n                const response = await this.apiService.validateUsername(username);\n                if (response.success && response.data?.available) {\n                    validationLabel.className = 'ui pointing green label username-validation';\n                    validationLabel.textContent = 'Username is available';\n                }\n                else {\n                    validationLabel.className = 'ui pointing red label username-validation';\n                    validationLabel.textContent = 'Username is not available';\n                }\n                validationLabel.style.display = 'block';\n            }\n            catch (error) {\n                console.error('Error validating username:', error);\n                validationLabel.style.display = 'none';\n            }\n        }, 500); // Debounce for 500ms\n    }\n    async handleSubmit(event) {\n        event.preventDefault();\n        const form = event.target;\n        const formData = new FormData(form);\n        const data = Object.fromEntries(formData.entries());\n        this.setLoading(true);\n        this.hideMessages();\n        try {\n            const response = await this.apiService.createRequest({\n                username: data.username,\n                email: data.email,\n                displayName: data.displayName\n            });\n            if (response.success) {\n                this.showSuccess('Request submitted successfully! Please check your email for the validation link.');\n                form.reset();\n                // Redirect to validation page after a short delay\n                setTimeout(() => {\n                    window.location.href = '/app/validate';\n                }, 2000);\n            }\n            else {\n                this.showError(response.error || 'Failed to submit request');\n            }\n        }\n        catch (error) {\n            this.showError('An unexpected error occurred');\n            console.error('Error submitting form:', error);\n        }\n        finally {\n            this.setLoading(false);\n        }\n    }\n    setLoading(isLoading) {\n        const button = this.element.querySelector('button[type=\"submit\"]');\n        const loader = button.querySelector('.loader');\n        const buttonText = button.querySelector('.button-text');\n        button.disabled = isLoading;\n        loader.style.display = isLoading ? 'inline-block' : 'none';\n        buttonText.style.display = isLoading ? 'none' : 'inline-block';\n    }\n    showError(message) {\n        const errorMessage = this.element.querySelector('.error.message');\n        errorMessage.textContent = message;\n        errorMessage.style.display = 'block';\n    }\n    showSuccess(message) {\n        const successMessage = this.element.querySelector('.success.message');\n        successMessage.textContent = message;\n        successMessage.style.display = 'block';\n    }\n    hideMessages() {\n        const messages = this.element.querySelectorAll('.message');\n        messages.forEach(msg => msg.style.display = 'none');\n    }\n}\nexports.RequestView = RequestView;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ValidateView = void 0;\nconst base_view_1 = require(\"./base.view\");\nconst api_service_1 = require(\"../services/api.service\");\nclass ValidateView extends base_view_1.BaseView {\n    constructor() {\n        super('validate');\n        this.apiService = api_service_1.ApiService.getInstance();\n        this.render();\n    }\n    render() {\n        const html = `\n      <div class=\"ui segment\">\n        <h2 class=\"ui header\">Validate Email</h2>\n        <form class=\"ui form\" id=\"validate-email-form\">\n          <div class=\"field\">\n            <label>Email Address</label>\n            <input type=\"email\" name=\"email\" required>\n          </div>\n          <button class=\"ui primary button\" type=\"submit\">\n            <span class=\"button-text\">Validate Email</span>\n            <div class=\"ui active inline loader\" style=\"display: none;\"></div>\n          </button>\n        </form>\n        <div class=\"ui error message\" style=\"display: none;\"></div>\n        <div class=\"ui success message\" style=\"display: none;\"></div>\n      </div>\n    `;\n        this.setContent(html);\n        this.setupEventListeners();\n    }\n    setupEventListeners() {\n        const form = this.element.querySelector('#validate-email-form');\n        form.addEventListener('submit', this.handleSubmit.bind(this));\n    }\n    async handleSubmit(event) {\n        event.preventDefault();\n        const form = event.target;\n        const formData = new FormData(form);\n        const email = formData.get('email');\n        this.setLoading(true);\n        this.hideMessages();\n        try {\n            const response = await this.apiService.validateEmail(email);\n            if (response.success) {\n                this.showSuccess('Email validated successfully!');\n                form.reset();\n            }\n            else {\n                this.showError(response.error || 'Failed to validate email');\n            }\n        }\n        catch (error) {\n            this.showError('An unexpected error occurred');\n            console.error('Error validating email:', error);\n        }\n        finally {\n            this.setLoading(false);\n        }\n    }\n    setLoading(isLoading) {\n        const button = this.element.querySelector('button[type=\"submit\"]');\n        const loader = button.querySelector('.loader');\n        const buttonText = button.querySelector('.button-text');\n        button.disabled = isLoading;\n        loader.style.display = isLoading ? 'inline-block' : 'none';\n        buttonText.style.display = isLoading ? 'none' : 'inline-block';\n    }\n    showError(message) {\n        const errorMessage = this.element.querySelector('.error.message');\n        errorMessage.textContent = message;\n        errorMessage.style.display = 'block';\n    }\n    showSuccess(message) {\n        const successMessage = this.element.querySelector('.success.message');\n        successMessage.textContent = message;\n        successMessage.style.display = 'block';\n    }\n    hideMessages() {\n        const messages = this.element.querySelectorAll('.message');\n        messages.forEach(msg => msg.style.display = 'none');\n    }\n}\nexports.ValidateView = ValidateView;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst request_view_1 = require(\"./views/request.view\");\nconst validate_view_1 = require(\"./views/validate.view\");\nconst certificate_view_1 = require(\"./views/certificate.view\");\nconst api_service_1 = require(\"./services/api.service\");\nclass CertM3App {\n    constructor() {\n        this.currentView = null;\n        this.views = {};\n        this.apiService = api_service_1.ApiService.getInstance();\n        this.setupNavigation();\n        this.handleRoute(window.location.pathname);\n    }\n    setupNavigation() {\n        window.addEventListener('popstate', (e) => {\n            this.handleRoute(window.location.pathname);\n        });\n        // Handle link clicks\n        document.addEventListener('click', (e) => {\n            const target = e.target;\n            const link = target.closest('a');\n            if (link && link.getAttribute('href')?.startsWith('/app/')) {\n                e.preventDefault();\n                this.navigateTo(link.getAttribute('href'));\n            }\n        });\n    }\n    handleRoute(path) {\n        const viewName = path.split('/')[2] || 'request';\n        this.showView(viewName);\n    }\n    navigateTo(path) {\n        window.history.pushState({}, '', path);\n        this.handleRoute(path);\n    }\n    showView(viewName) {\n        if (this.currentView) {\n            this.currentView.hide();\n        }\n        if (!this.views[viewName]) {\n            this.views[viewName] = this.createView(viewName);\n        }\n        this.views[viewName].show();\n        this.currentView = this.views[viewName];\n    }\n    createView(viewName) {\n        switch (viewName) {\n            case 'request':\n                return new request_view_1.RequestView();\n            case 'validate':\n                return new validate_view_1.ValidateView();\n            case 'certificate':\n                return new certificate_view_1.CertificateView();\n            default:\n                return new request_view_1.RequestView(); // Default to request view\n        }\n    }\n}\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', () => {\n    new CertM3App();\n});\n"],"names":[],"sourceRoot":""}